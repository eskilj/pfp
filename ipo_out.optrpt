
    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main) [1/7=14.3%] control.c(21,34)
  -> EXTERN: (37,10) fopen
  -> EXTERN: (40,9) perror
  -> EXTERN: (41,9) exit
  -> EXTERN: (45,9) fscanf
  -> EXTERN: (50,5) fclose
  -> INLINE: (56,14) second (isz = 9) (sz = 14)
    -> EXTERN: (92,9) gettimeofday
  -> INLINE: (58,17) second (isz = 9) (sz = 14)
    -> EXTERN: (92,9) gettimeofday
  -> (59,9) evolve (isz = 312) (sz = 319)
     [[ Inlining would exceed -inline-max-size value (319>230) <1>]]
  -> INLINE: (60,16) second (isz = 9) (sz = 14)
    -> EXTERN: (92,9) gettimeofday
  -> EXTERN: (61,9) printf
  -> EXTERN: (62,9) printf
  -> EXTERN: (65,9) sprintf
  -> EXTERN: (66,15) fopen
  -> EXTERN: (69,13) perror
  -> EXTERN: (70,13) exit
  -> EXTERN: (74,13) fprintf
  -> EXTERN: (80,9) fclose
  -> INLINE: (82,13) second (isz = 9) (sz = 14)
    -> EXTERN: (92,9) gettimeofday
  -> EXTERN: (83,5) printf


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at control.c(44,5)
   remark #15527: loop was not vectorized: function call to fscanf cannot be vectorized   [ control.c(45,9) ]
LOOP END

LOOP BEGIN at control.c(57,5)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at control.c(73,9)
      remark #15527: loop was not vectorized: function call to fprintf cannot be vectorized   [ control.c(74,13) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: evolve

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve) [2/7=28.6%] MD.c(34,35)
  -> EXTERN: (42,9) printf
  -> EXTERN: (43,9) printf
  -> INLINE: (74,27) force (isz = 3) (sz = 14)
    -> EXTERN: util.c:(26,19) pow
  -> INLINE: (113,34) force (isz = 3) (sz = 14)
    -> EXTERN: util.c:(26,19) pow


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at MD.c(41,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MD.c(49,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MD.c(50,13)
         remark #15389: vectorization support: reference f has unaligned access   [ MD.c(51,21) ]
         remark #15389: vectorization support: reference vel has unaligned access   [ MD.c(51,21) ]
         remark #15388: vectorization support: reference wind has aligned access   [ MD.c(51,21) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 1.110 
         remark #15479: lightweight vector operations: 8 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at MD.c(50,13)
      <Remainder>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(57,9)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at MD.c(61,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ MD.c(62,13) ]
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3

      LOOP BEGIN at MD.c(62,13)
         remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ MD.c(63,17) ]
         remark #15389: vectorization support: reference pos has unaligned access   [ MD.c(63,17) ]
         remark #15389: vectorization support: reference pos has unaligned access   [ MD.c(63,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 8 
         remark #15477: vector loop cost: 4.000 
         remark #15478: estimated potential speedup: 0.630 
         remark #15479: lightweight vector operations: 6 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(67,9)
      remark #15388: vectorization support: reference r has aligned access   [ MD.c(68,13) ]
      remark #15388: vectorization support: reference r has aligned access   [ MD.c(68,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 34.000 
      remark #15478: estimated potential speedup: 5.170 
      remark #15479: lightweight vector operations: 4 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=256
   LOOP END

   LOOP BEGIN at MD.c(71,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MD.c(72,18)
         remark #15389: vectorization support: reference f has unaligned access   [ MD.c(73,17) ]
         remark #15389: vectorization support: reference f has unaligned access   [ MD.c(73,17) ]
         remark #15389: vectorization support: reference pos has unaligned access   [ MD.c(73,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 49 
         remark #15477: vector loop cost: 26.000 
         remark #15478: estimated potential speedup: 1.250 
         remark #15479: lightweight vector operations: 17 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at MD.c(72,18)
      <Remainder>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(79,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between delta_pos line 82 and delta_pos line 82
      remark #15346: vector dependence: assumed OUTPUT dependence between delta_pos line 82 and delta_pos line 82

      LOOP BEGIN at MD.c(80,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between k.734 line 84 and k.734 line 82
         remark #15346: vector dependence: assumed ANTI dependence between k.734 line 82 and k.734 line 84
         remark #15346: vector dependence: assumed ANTI dependence between k.734 line 82 and k.734 line 84
         remark #15346: vector dependence: assumed FLOW dependence between k.734 line 84 and k.734 line 82
         remark #25439: unrolled with remainder by 2  

         LOOP BEGIN at MD.c(81,17)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END
      LOOP END

      LOOP BEGIN at MD.c(80,13)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(89,9)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at MD.c(93,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ MD.c(94,13) ]
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3

      LOOP BEGIN at MD.c(94,13)
         remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ MD.c(95,17) ]
         remark #15389: vectorization support: reference delta_pos has unaligned access   [ MD.c(95,17) ]
         remark #15389: vectorization support: reference delta_pos has unaligned access   [ MD.c(95,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 8 
         remark #15477: vector loop cost: 4.000 
         remark #15478: estimated potential speedup: 0.630 
         remark #15479: lightweight vector operations: 6 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(99,9)
      remark #15388: vectorization support: reference delta_r has aligned access   [ MD.c(100,13) ]
      remark #15388: vectorization support: reference delta_r has aligned access   [ MD.c(100,13) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 8.500 
      remark #15478: estimated potential speedup: 5.170 
      remark #15479: lightweight vector operations: 4 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=2096640
   LOOP END

   LOOP BEGIN at MD.c(107,9)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 3 ) --> ( 2 1 3 ) 
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between f line 115 and f line 119
      remark #15346: vector dependence: assumed OUTPUT dependence between f line 119 and f line 115

      LOOP BEGIN at MD.c(109,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between f line 115 and f line 118
         remark #15346: vector dependence: assumed OUTPUT dependence between f line 118 and f line 115
         remark #25015: Estimate of max trip count of loop=4096

         LOOP BEGIN at MD.c(111,22)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(131,9)
      remark #15388: vectorization support: reference mass has aligned access   [ MD.c(132,13) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15460: masked strided loads: 12 
      remark #15462: unmasked indexed (or gather) loads: 6 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 143 
      remark #15477: vector loop cost: 81.000 
      remark #15478: estimated potential speedup: 1.760 
      remark #15479: lightweight vector operations: 56 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1024

      LOOP BEGIN at MD.c(133,13)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

MD.c(58,13):remark #34026: call to memset implemented as a call to optimized library version
MD.c(90,13):remark #34026: call to memset implemented as a call to optimized library version
===========================================================================

Begin optimization report for: force

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (force) util.c(25,47)

===========================================================================

Begin optimization report for: second

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (second) control.c(87,17)

===========================================================================

Begin optimization report for: add_norm

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (add_norm) util.c(18,1)

===========================================================================

Begin optimization report for: wind_force

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (wind_force) util.c(11,1)

===========================================================================

Begin optimization report for: visc_force

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (visc_force) util.c(4,1)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: MD.c
        evolve(34)

  File: control.c
        main(21)


  0 out of 2 routine(s) used training profile data for PGO feedback
  0 out of 2 routine(s) were unable to use training profile data for PGO feedback
  0 out of 2 routine(s) were unable to find training profile data for PGO feedback
  2 out of 2 routine(s) used a static estimate profile for PGO feedback




    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

